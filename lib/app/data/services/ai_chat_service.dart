import 'dart:async';
import 'package:firebase_ai/firebase_ai.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:hive/hive.dart';
import 'package:get/get.dart';
import '../models/chat_message_model.dart';
import '../models/chat_conversation_model.dart';

import '../models/story_model.dart';
import '../models/chapter_model.dart';
import 'ai_settings_service.dart';
import 'library_service.dart';
import 'chapter_service.dart';

class AiChatService {
  static const String _conversationsBoxName = 'chat_conversations';
  static const String _messagesBoxName = 'chat_messages';

  Box<ChatConversation>? _conversationsBox;
  Box<ChatMessage>? _messagesBox;
  GenerativeModel? _model;

  // AI Settings Service
  AiSettingsService? _aiSettingsService;

  // Story Services
  LibraryService? _libraryService;
  ChapterService? _chapterService;

  // Singleton pattern
  static final AiChatService _instance = AiChatService._internal();
  factory AiChatService() => _instance;
  AiChatService._internal();

  // Initialize service
  Future<void> init() async {
    try {
      // Initialize Firebase if not already done
      if (Firebase.apps.isEmpty) {
        throw Exception('Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      }

      // Get AI Settings Service from GetX
      try {
        _aiSettingsService = Get.find<AiSettingsService>();
      } catch (e) {
        // If not found, create and initialize a new instance
        _aiSettingsService = AiSettingsService();
        await _aiSettingsService!.init();
      }

      // Initialize story services
      _libraryService = LibraryService();
      await _libraryService!.init();

      _chapterService = ChapterService();
      await _chapterService!.init();

      // Initialize Hive boxes
      _conversationsBox = await Hive.openBox<ChatConversation>(
        _conversationsBoxName,
      );
      _messagesBox = await Hive.openBox<ChatMessage>(_messagesBoxName);

      // Initialize Firebase AI model with settings
      await _initializeAiModel();

      print('‚úÖ AI Chat Service initialized successfully');
    } catch (e) {
      print('‚ùå Error initializing AI Chat Service: $e');
      rethrow;
    }
  }

  // Initialize AI model with current settings
  Future<void> _initializeAiModel() async {
    final settings = _aiSettingsService!.getCurrentSettings();

    _model = FirebaseAI.googleAI().generativeModel(
      model: settings.modelName,
      generationConfig: GenerationConfig(
        temperature: settings.temperature,
        topP: settings.topP,
        topK: settings.topK,
        maxOutputTokens: settings.maxOutputTokens,
      ),
      safetySettings: _buildSafetySettings(settings.safetySettings),
      systemInstruction: Content.text(settings.systemPrompt),
      tools: [Tool.functionDeclarations(_getFunctionDeclarations())],
    );
  }

  // Build safety settings from string list
  List<SafetySetting> _buildSafetySettings(List<String> safetySettings) {
    final List<SafetySetting> settings = [];

    // Map safety setting strings to actual SafetySetting objects
    final categories = [
      HarmCategory.harassment,
      HarmCategory.hateSpeech,
      HarmCategory.sexuallyExplicit,
      HarmCategory.dangerousContent,
    ];

    for (int i = 0; i < categories.length && i < safetySettings.length; i++) {
      final threshold = _parseHarmBlockThreshold(safetySettings[i]);
      settings.add(SafetySetting(categories[i], threshold, null));
    }

    return settings;
  }

  // Parse harm block threshold from string
  HarmBlockThreshold _parseHarmBlockThreshold(String threshold) {
    switch (threshold) {
      case 'BLOCK_NONE':
        return HarmBlockThreshold.none;
      case 'BLOCK_LOW_AND_ABOVE':
        return HarmBlockThreshold.low;
      case 'BLOCK_MEDIUM_AND_ABOVE':
        return HarmBlockThreshold.medium;
      case 'BLOCK_HIGH_AND_ABOVE':
        return HarmBlockThreshold.high;
      default:
        return HarmBlockThreshold.medium;
    }
  }

  // Update AI model when settings change
  Future<void> updateAiModel() async {
    await _initializeAiModel();
    print('‚úÖ AI model updated with new settings');
  }

  // Get AI Settings Service instance
  AiSettingsService get aiSettingsService => _aiSettingsService!;

  // Get function declarations for AI model
  List<FunctionDeclaration> _getFunctionDeclarations() {
    return [
      // L·∫•y danh s√°ch truy·ªán
      FunctionDeclaration(
        'getStoryList',
        'L·∫•y danh s√°ch t·∫•t c·∫£ truy·ªán trong th∆∞ vi·ªán c·ªßa ng∆∞·ªùi d√πng. Tr·∫£ v·ªÅ danh s√°ch truy·ªán v·ªõi ID (string) ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng cho getStoryDetails v√† getChapterList. V√≠ d·ª• ID: "story_123456789", "novel_abc_def".',
        parameters: {
          'limit': Schema.integer(
            description:
                'S·ªë l∆∞·ª£ng truy·ªán t·ªëi ƒëa mu·ªën l·∫•y (m·∫∑c ƒë·ªãnh: 20, t·ªëi ƒëa: 100)',
          ),
          'sortBy': Schema.string(
            description:
                'S·∫Øp x·∫øp theo: "title" (t√™n), "author" (t√°c gi·∫£), "updatedAt" (c·∫≠p nh·∫≠t m·ªõi nh·∫•t), "rating" (ƒë√°nh gi√° cao), "readChapters" (ƒë√£ ƒë·ªçc nhi·ªÅu)',
          ),
          'filterBy': Schema.string(
            description:
                'L·ªçc theo: "all" (t·∫•t c·∫£), "favorites" (y√™u th√≠ch), "reading" (ƒëang ƒë·ªçc), "completed" (ƒë√£ ho√†n th√†nh)',
          ),
        },
      ),

      // L·∫•y th√¥ng tin chi ti·∫øt truy·ªán
      FunctionDeclaration(
        'getStoryDetails',
        'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt truy·ªán c·ª• th·ªÉ b·∫±ng storyId (string). S·ª≠ d·ª•ng ch√≠nh x√°c ID t·ª´ k·∫øt qu·∫£ getStoryList ho·∫∑c searchStories. V√≠ d·ª•: storyId = "story_123456789".',
        parameters: {
          'storyId': Schema.string(
            description:
                'ID string c·ªßa truy·ªán (v√≠ d·ª•: "story_123456789", "novel_abc_def") - l·∫•y t·ª´ field "id" trong k·∫øt qu·∫£ getStoryList ho·∫∑c searchStories',
          ),
        },
      ),

      // T√¨m ki·∫øm truy·ªán
      FunctionDeclaration(
        'searchStories',
        'T√¨m ki·∫øm truy·ªán theo t·ª´ kh√≥a trong t√™n, t√°c gi·∫£, m√¥ t·∫£ ho·∫∑c th·ªÉ lo·∫°i. Tr·∫£ v·ªÅ danh s√°ch k·∫øt qu·∫£ v·ªõi ID (string) ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng cho getStoryDetails v√† getChapterList.',
        parameters: {
          'query': Schema.string(
            description:
                'T·ª´ kh√≥a t√¨m ki·∫øm (v√≠ d·ª•: "sword art", "isekai", "romance")',
          ),
          'searchIn': Schema.string(
            description:
                'T√¨m ki·∫øm trong: "all" (t·∫•t c·∫£), "title" (t√™n), "author" (t√°c gi·∫£), "description" (m√¥ t·∫£), "genres" (th·ªÉ lo·∫°i)',
          ),
        },
      ),

      // L·∫•y danh s√°ch ch∆∞∆°ng c·ªßa truy·ªán
      FunctionDeclaration(
        'getChapterList',
        'L·∫•y danh s√°ch ch∆∞∆°ng c·ªßa m·ªôt truy·ªán c·ª• th·ªÉ b·∫±ng storyId (string). Tr·∫£ v·ªÅ danh s√°ch ch∆∞∆°ng v·ªõi chapterId ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc n·ªôi dung. V√≠ d·ª•: storyId = "ncode.syosetu.com_n1706ko".',
        parameters: {
          'storyId': Schema.string(
            description:
                'ID string c·ªßa truy·ªán (v√≠ d·ª•: "ncode.syosetu.com_n1706ko", "domain.com_code") - l·∫•y t·ª´ field "id" trong k·∫øt qu·∫£ getStoryList, getStoryDetails ho·∫∑c searchStories',
          ),
          'limit': Schema.integer(
            description:
                'S·ªë l∆∞·ª£ng ch∆∞∆°ng t·ªëi ƒëa mu·ªën l·∫•y (m·∫∑c ƒë·ªãnh: 50, t·ªëi ƒëa: 200)',
          ),
        },
      ),

      // L·∫•y n·ªôi dung ch∆∞∆°ng
      FunctionDeclaration(
        'getChapterContent',
        'L·∫•y n·ªôi dung chi ti·∫øt c·ªßa m·ªôt ch∆∞∆°ng c·ª• th·ªÉ b·∫±ng chapterId (string). S·ª≠ d·ª•ng ch√≠nh x√°c ID t·ª´ k·∫øt qu·∫£ getChapterList. V√≠ d·ª•: chapterId = "ncode.syosetu.com_n1706ko_c1", "domain.com_code_cchapter1".',
        parameters: {
          'chapterId': Schema.string(
            description:
                'ID string c·ªßa ch∆∞∆°ng (v√≠ d·ª•: "ncode.syosetu.com_n1706ko_c1", "domain.com_code_cchapter1") - l·∫•y t·ª´ field "id" trong k·∫øt qu·∫£ getChapterList',
          ),
        },
      ),
    ];
  }

  // X·ª≠ l√Ω function calls
  Future<Map<String, dynamic>> _handleFunctionCall(
    FunctionCall functionCall,
  ) async {
    print(
      'üîß Handling function call: ${functionCall.name} with args: ${functionCall.args}',
    );

    try {
      Map<String, dynamic> result;
      switch (functionCall.name) {
        case 'getStoryList':
          result = await _getStoryList(functionCall.args);
          break;
        case 'getStoryDetails':
          result = await _getStoryDetails(functionCall.args);
          break;
        case 'searchStories':
          result = await _searchStories(functionCall.args);
          break;
        case 'getChapterList':
          result = await _getChapterList(functionCall.args);
          break;
        case 'getChapterContent':
          result = await _getChapterContent(functionCall.args);
          break;
        default:
          result = {
            'success': false,
            'error': 'H√†m kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${functionCall.name}',
          };
      }

      print('üîß Function call result: $result');
      return result;
    } catch (e) {
      print('‚ùå Error in function call ${functionCall.name}: $e');
      return {
        'success': false,
        'error': 'L·ªói khi th·ª±c thi h√†m ${functionCall.name}: $e',
      };
    }
  }

  // L·∫•y danh s√°ch truy·ªán
  Future<Map<String, dynamic>> _getStoryList(Map<String, dynamic> args) async {
    try {
      // Validation v√† gi·ªõi h·∫°n tham s·ªë
      int limit = args['limit'] ?? 20;
      if (limit < 1) limit = 1;
      if (limit > 100) limit = 100;

      final String sortBy = args['sortBy'] ?? 'updatedAt';
      final String filterBy = args['filterBy'] ?? 'all';

      // Validate sortBy
      final validSortOptions = [
        'title',
        'author',
        'updatedAt',
        'rating',
        'readChapters',
      ];
      if (!validSortOptions.contains(sortBy)) {
        return {
          'success': false,
          'error':
              'T√πy ch·ªçn s·∫Øp x·∫øp kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${validSortOptions.join(', ')}',
        };
      }

      // Validate filterBy
      final validFilterOptions = ['all', 'favorites', 'reading', 'completed'];
      if (!validFilterOptions.contains(filterBy)) {
        return {
          'success': false,
          'error':
              'T√πy ch·ªçn l·ªçc kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${validFilterOptions.join(', ')}',
        };
      }

      List<Story> stories = _libraryService!.getAllStories();

      // L·ªçc truy·ªán
      switch (filterBy) {
        case 'favorites':
          stories = stories.where((s) => s.isFavorite).toList();
          break;
        case 'reading':
          stories = stories
              .where(
                (s) => s.readChapters > 0 && s.readChapters < s.totalChapters,
              )
              .toList();
          break;
        case 'completed':
          stories = stories
              .where(
                (s) => s.readChapters >= s.totalChapters && s.totalChapters > 0,
              )
              .toList();
          break;
        case 'all':
        default:
          // Kh√¥ng l·ªçc
          break;
      }

      // S·∫Øp x·∫øp truy·ªán
      switch (sortBy) {
        case 'title':
          stories.sort(
            (a, b) => (a.translatedTitle ?? a.title).compareTo(
              b.translatedTitle ?? b.title,
            ),
          );
          break;
        case 'author':
          stories.sort(
            (a, b) => (a.translatedAuthor ?? a.author).compareTo(
              b.translatedAuthor ?? b.author,
            ),
          );
          break;
        case 'rating':
          stories.sort((a, b) => b.rating.compareTo(a.rating));
          break;
        case 'readChapters':
          stories.sort((a, b) => b.readChapters.compareTo(a.readChapters));
          break;
        case 'updatedAt':
        default:
          stories.sort((a, b) => b.updatedAt.compareTo(a.updatedAt));
          break;
      }

      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
      if (stories.length > limit) {
        stories = stories.take(limit).toList();
      }

      // Chuy·ªÉn ƒë·ªïi sang format ƒë∆°n gi·∫£n cho AI
      final storyList = stories
          .map(
            (story) => {
              'id': story.id,
              'title': story.translatedTitle ?? story.title,
              'originalTitle': story.title,
              'author': story.translatedAuthor ?? story.author,
              'originalAuthor': story.author,
              'description': story.translatedDescription ?? story.description,
              'genres': story.translatedGenres ?? story.genres,
              'status': story.status,
              'totalChapters': story.totalChapters,
              'readChapters': story.readChapters,
              'rating': story.rating,
              'isFavorite': story.isFavorite,
              'lastReadAt': story.lastReadAt?.toIso8601String(),
              'updatedAt': story.updatedAt.toIso8601String(),
              'isTranslated': story.isTranslated,
            },
          )
          .toList();

      return {
        'success': true,
        'data': {
          'stories': storyList,
          'total': storyList.length,
          'filter': filterBy,
          'sortBy': sortBy,
          'message': storyList.isEmpty
              ? 'Kh√¥ng c√≥ truy·ªán n√†o trong th∆∞ vi·ªán. H√£y th√™m truy·ªán t·ª´ trang web ho·∫∑c import d·ªØ li·ªáu.'
              : 'ƒê√£ t√¨m th·∫•y ${storyList.length} truy·ªán. S·ª≠ d·ª•ng field "id" ƒë·ªÉ g·ªçi getStoryDetails ho·∫∑c getChapterList.',
          'usage': storyList.isNotEmpty
              ? 'V√≠ d·ª•: getStoryDetails(storyId: "${storyList.first['id']}") ho·∫∑c getChapterList(storyId: "${storyList.first['id']}")'
              : null,
        },
      };
    } catch (e) {
      return {'success': false, 'error': 'L·ªói khi l·∫•y danh s√°ch truy·ªán: $e'};
    }
  }

  // L·∫•y th√¥ng tin chi ti·∫øt truy·ªán
  Future<Map<String, dynamic>> _getStoryDetails(
    Map<String, dynamic> args,
  ) async {
    try {
      // Validation tham s·ªë
      final String? storyIdArg = args['storyId'];
      if (storyIdArg == null || storyIdArg.isEmpty) {
        return {
          'success': false,
          'error':
              'Thi·∫øu storyId. Vui l√≤ng s·ª≠ d·ª•ng ID t·ª´ getStoryList ho·∫∑c searchStories.',
        };
      }

      final String storyId = storyIdArg;
      final Story? story = _libraryService!.getStoryById(storyId);

      if (story == null) {
        return {
          'success': false,
          'error': 'Kh√¥ng t√¨m th·∫•y truy·ªán v·ªõi ID: $storyId',
        };
      }

      // L·∫•y th·ªëng k√™ ch∆∞∆°ng
      final chapters = _chapterService!.getChaptersByStoryId(storyId);
      final readChapters = chapters.where((c) => c.isRead).length;
      final totalWords = chapters.fold<int>(0, (sum, c) => sum + c.wordCount);

      return {
        'success': true,
        'data': {
          'id': story.id,
          'title': story.translatedTitle ?? story.title,
          'originalTitle': story.title,
          'author': story.translatedAuthor ?? story.author,
          'originalAuthor': story.author,
          'description': story.translatedDescription ?? story.description,
          'originalDescription': story.description,
          'genres': story.translatedGenres ?? story.genres,
          'originalGenres': story.genres,
          'status': story.status,
          'totalChapters': story.totalChapters,
          'readChapters': readChapters,
          'rating': story.rating,
          'isFavorite': story.isFavorite,
          'translator': story.translator,
          'originalLanguage': story.originalLanguage,
          'sourceWebsite': story.sourceWebsite,
          'sourceUrl': story.sourceUrl,
          'coverImageUrl': story.coverImageUrl,
          'createdAt': story.createdAt.toIso8601String(),
          'updatedAt': story.updatedAt.toIso8601String(),
          'lastReadAt': story.lastReadAt?.toIso8601String(),
          'isTranslated': story.isTranslated,
          'translatedAt': story.translatedAt?.toIso8601String(),
          'statistics': {
            'chaptersInDatabase': chapters.length,
            'readChapters': readChapters,
            'totalWords': totalWords,
            'averageWordsPerChapter': chapters.isNotEmpty
                ? (totalWords / chapters.length).round()
                : 0,
          },
          'metadata': story.metadata,
        },
      };
    } catch (e) {
      return {'success': false, 'error': 'L·ªói khi l·∫•y th√¥ng tin truy·ªán: $e'};
    }
  }

  // T√¨m ki·∫øm truy·ªán
  Future<Map<String, dynamic>> _searchStories(Map<String, dynamic> args) async {
    try {
      final String query = args['query'].toString().toLowerCase();
      final String searchIn = args['searchIn'] ?? 'all';

      if (query.isEmpty) {
        return {
          'success': false,
          'error': 'T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
        };
      }

      final List<Story> allStories = _libraryService!.getAllStories();
      final List<Story> matchedStories = [];

      for (final story in allStories) {
        bool matches = false;

        switch (searchIn) {
          case 'title':
            matches =
                (story.translatedTitle ?? story.title).toLowerCase().contains(
                  query,
                ) ||
                story.title.toLowerCase().contains(query);
            break;
          case 'author':
            matches =
                (story.translatedAuthor ?? story.author).toLowerCase().contains(
                  query,
                ) ||
                story.author.toLowerCase().contains(query);
            break;
          case 'description':
            matches =
                (story.translatedDescription ?? story.description)
                    .toLowerCase()
                    .contains(query) ||
                story.description.toLowerCase().contains(query);
            break;
          case 'genres':
            final allGenres = [
              ...(story.translatedGenres ?? []),
              ...story.genres,
            ];
            matches = allGenres.any(
              (genre) => genre.toLowerCase().contains(query),
            );
            break;
          case 'all':
          default:
            matches =
                (story.translatedTitle ?? story.title).toLowerCase().contains(
                  query,
                ) ||
                story.title.toLowerCase().contains(query) ||
                (story.translatedAuthor ?? story.author).toLowerCase().contains(
                  query,
                ) ||
                story.author.toLowerCase().contains(query) ||
                (story.translatedDescription ?? story.description)
                    .toLowerCase()
                    .contains(query) ||
                story.description.toLowerCase().contains(query) ||
                [
                  ...(story.translatedGenres ?? []),
                  ...story.genres,
                ].any((genre) => genre.toLowerCase().contains(query));
            break;
        }

        if (matches) {
          matchedStories.add(story);
        }
      }

      // S·∫Øp x·∫øp theo ƒë·ªô li√™n quan (c√≥ th·ªÉ c·∫£i thi·ªán thu·∫≠t to√°n sau)
      matchedStories.sort((a, b) => b.updatedAt.compareTo(a.updatedAt));

      final searchResults = matchedStories
          .map(
            (story) => {
              'id': story.id,
              'title': story.translatedTitle ?? story.title,
              'originalTitle': story.title,
              'author': story.translatedAuthor ?? story.author,
              'originalAuthor': story.author,
              'description': story.translatedDescription ?? story.description,
              'genres': story.translatedGenres ?? story.genres,
              'status': story.status,
              'totalChapters': story.totalChapters,
              'readChapters': story.readChapters,
              'rating': story.rating,
              'isFavorite': story.isFavorite,
              'isTranslated': story.isTranslated,
            },
          )
          .toList();

      return {
        'success': true,
        'data': {
          'results': searchResults,
          'total': searchResults.length,
          'query': query,
          'searchIn': searchIn,
        },
      };
    } catch (e) {
      return {'success': false, 'error': 'L·ªói khi t√¨m ki·∫øm truy·ªán: $e'};
    }
  }

  // L·∫•y danh s√°ch ch∆∞∆°ng
  Future<Map<String, dynamic>> _getChapterList(
    Map<String, dynamic> args,
  ) async {
    try {
      // Validation tham s·ªë
      final String? storyIdArg = args['storyId'];
      if (storyIdArg == null || storyIdArg.isEmpty) {
        return {
          'success': false,
          'error':
              'Thi·∫øu storyId. Vui l√≤ng s·ª≠ d·ª•ng ID t·ª´ getStoryList ho·∫∑c searchStories.',
        };
      }

      final String storyId = storyIdArg;
      int limit = args['limit'] ?? 50;
      if (limit < 1) limit = 1;
      if (limit > 200) limit = 200;

      final Story? story = _libraryService!.getStoryById(storyId);
      if (story == null) {
        return {
          'success': false,
          'error': 'Kh√¥ng t√¨m th·∫•y truy·ªán v·ªõi ID: $storyId',
        };
      }

      List<Chapter> chapters = _chapterService!.getChaptersByStoryId(storyId);

      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
      if (chapters.length > limit) {
        chapters = chapters.take(limit).toList();
      }

      final chapterList = chapters
          .map(
            (chapter) => {
              'id': chapter.id,
              'title': chapter.translatedTitle ?? chapter.title,
              'originalTitle': chapter.title,
              'chapterNumber': chapter.chapterNumber,
              'volumeNumber': chapter.volumeNumber,
              'volumeTitle': chapter.volumeTitle,
              'url': chapter.url,
              'publishedAt': chapter.publishedAt.toIso8601String(),
              'isRead': chapter.isRead,
              'wordCount': chapter.wordCount,
              'hasImages': chapter.hasImages,
              'hasContent': chapter.content.isNotEmpty,
              'isTranslated': chapter.isTranslated,
              'translatedAt': chapter.translatedAt?.toIso8601String(),
            },
          )
          .toList();

      return {
        'success': true,
        'data': {
          'storyId': storyId,
          'storyTitle': story.translatedTitle ?? story.title,
          'chapters': chapterList,
          'total': chapterList.length,
          'totalInDatabase': chapters.length,
          'message': chapterList.isEmpty
              ? 'Truy·ªán n√†y ch∆∞a c√≥ ch∆∞∆°ng n√†o trong database.'
              : 'ƒê√£ t√¨m th·∫•y ${chapterList.length} ch∆∞∆°ng. S·ª≠ d·ª•ng field "id" ƒë·ªÉ g·ªçi getChapterContent.',
          'usage': chapterList.isNotEmpty
              ? 'V√≠ d·ª•: getChapterContent(chapterId: "${chapterList.first['id']}")'
              : null,
        },
      };
    } catch (e) {
      return {'success': false, 'error': 'L·ªói khi l·∫•y danh s√°ch ch∆∞∆°ng: $e'};
    }
  }

  // L·∫•y n·ªôi dung ch∆∞∆°ng
  Future<Map<String, dynamic>> _getChapterContent(
    Map<String, dynamic> args,
  ) async {
    try {
      // Validation tham s·ªë
      final String? chapterIdArg = args['chapterId'];
      if (chapterIdArg == null || chapterIdArg.isEmpty) {
        return {
          'success': false,
          'error': 'Thi·∫øu chapterId. Vui l√≤ng s·ª≠ d·ª•ng ID t·ª´ getChapterList.',
        };
      }

      final String chapterId = chapterIdArg;
      final Chapter? chapter = _chapterService!.getChapterById(chapterId);

      if (chapter == null) {
        return {
          'success': false,
          'error': 'Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng v·ªõi ID: $chapterId',
        };
      }

      final Story? story = _libraryService!.getStoryById(chapter.storyId);

      return {
        'success': true,
        'data': {
          'id': chapter.id,
          'storyId': chapter.storyId,
          'storyTitle': story?.translatedTitle ?? story?.title ?? 'Kh√¥ng r√µ',
          'title': chapter.translatedTitle ?? chapter.title,
          'originalTitle': chapter.title,
          'chapterNumber': chapter.chapterNumber,
          'volumeNumber': chapter.volumeNumber,
          'volumeTitle': chapter.volumeTitle,
          'content': chapter.translatedContent ?? chapter.content,
          'originalContent': chapter.content,
          'url': chapter.url,
          'publishedAt': chapter.publishedAt.toIso8601String(),
          'isRead': chapter.isRead,
          'wordCount': chapter.wordCount,
          'hasImages': chapter.hasImages,
          'isTranslated': chapter.isTranslated,
          'translatedAt': chapter.translatedAt?.toIso8601String(),
          'metadata': chapter.metadata,
        },
      };
    } catch (e) {
      return {'success': false, 'error': 'L·ªói khi l·∫•y n·ªôi dung ch∆∞∆°ng: $e'};
    }
  }

  // T·∫°o conversation m·ªõi
  Future<ChatConversation> createConversation({
    String? title,
    String? systemPrompt,
    Map<String, dynamic> metadata = const {},
  }) async {
    final conversationId = DateTime.now().millisecondsSinceEpoch.toString();

    // Use system prompt from settings if not provided
    final settings = _aiSettingsService!.getCurrentSettings();
    final effectiveSystemPrompt = systemPrompt ?? settings.systemPrompt;

    final conversation = ChatConversation.create(
      id: conversationId,
      title: title,
      systemPrompt: effectiveSystemPrompt,
      metadata: metadata,
    );

    await _conversationsBox?.put(conversationId, conversation);
    return conversation;
  }

  // L·∫•y t·∫•t c·∫£ conversations
  List<ChatConversation> getAllConversations() {
    final conversations = _conversationsBox?.values.toList() ?? [];
    conversations.sort((a, b) => b.updatedAt.compareTo(a.updatedAt));
    return conversations;
  }

  // L·∫•y conversation theo ID
  ChatConversation? getConversation(String conversationId) {
    return _conversationsBox?.get(conversationId);
  }

  // L·∫•y messages c·ªßa m·ªôt conversation
  List<ChatMessage> getConversationMessages(String conversationId) {
    final conversation = getConversation(conversationId);
    if (conversation == null) return [];

    final messages = <ChatMessage>[];
    for (final messageId in conversation.messageIds) {
      final message = _messagesBox?.get(messageId);
      if (message != null) {
        messages.add(message);
      }
    }

    messages.sort((a, b) => a.timestamp.compareTo(b.timestamp));
    return messages;
  }

  // G·ª≠i message v√† nh·∫≠n response
  Future<ChatMessage> sendMessage({
    required String conversationId,
    required String content,
    Map<String, dynamic> metadata = const {},
  }) async {
    if (_model == null) {
      throw Exception('AI model ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }

    final conversation = getConversation(conversationId);
    if (conversation == null) {
      throw Exception('Kh√¥ng t√¨m th·∫•y conversation');
    }

    // T·∫°o user message
    final userMessageId =
        '${conversationId}_${DateTime.now().millisecondsSinceEpoch}';
    final userMessage = ChatMessage.user(
      id: userMessageId,
      conversationId: conversationId,
      content: content,
      metadata: metadata,
    );

    // L∆∞u user message
    await _messagesBox?.put(userMessageId, userMessage);

    // C·∫≠p nh·∫≠t conversation
    final updatedConversation = conversation.copyWith(
      messageIds: List<String>.from(conversation.messageIds)
        ..add(userMessageId),
      messageCount: conversation.messageCount + 1,
      updatedAt: DateTime.now(),
    );

    if (updatedConversation.title == 'Cu·ªôc tr√≤ chuy·ªán m·ªõi' &&
        content.isNotEmpty) {
      updatedConversation.title = content.length > 50
          ? '${content.substring(0, 50)}...'
          : content;
    }

    updatedConversation.lastMessagePreview = content.length > 100
        ? '${content.substring(0, 100)}...'
        : content;

    await _conversationsBox?.put(conversationId, updatedConversation);

    try {
      // L·∫•y l·ªãch s·ª≠ chat ƒë·ªÉ t·∫°o context
      final chatHistory = _buildChatHistory(conversationId);

      // T·∫°o chat session
      final chat = _model!.startChat(history: chatHistory);

      // G·ª≠i message v√† nh·∫≠n response
      var response = await chat.sendMessage(Content.text(content));

      // X·ª≠ l√Ω function calls n·∫øu c√≥
      final functionCalls = response.functionCalls.toList();
      if (functionCalls.isNotEmpty) {
        // X·ª≠ l√Ω t·ª´ng function call
        for (final functionCall in functionCalls) {
          final functionResult = await _handleFunctionCall(functionCall);

          // Ki·ªÉm tra n·∫øu function call b·ªã l·ªói
          if (functionResult['success'] == false) {
            final errorMessage =
                functionResult['error'] ??
                'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán function call';
            throw Exception('Function call error: $errorMessage');
          }

          // G·ª≠i k·∫øt qu·∫£ function call tr·ªü l·∫°i model
          response = await chat.sendMessage(
            Content.functionResponse(functionCall.name, functionResult),
          );
        }
      }

      final responseText = response.text ?? '';

      // T·∫°o AI response message
      final settings = _aiSettingsService!.getCurrentSettings();
      final aiMessageId =
          '${conversationId}_${DateTime.now().millisecondsSinceEpoch + 1}';
      final aiMessage = ChatMessage.assistant(
        id: aiMessageId,
        conversationId: conversationId,
        content: responseText,
        isMarkdown: settings.enableMarkdown,
        status: ChatMessageStatus.sent,
      );

      // L∆∞u AI message
      await _messagesBox?.put(aiMessageId, aiMessage);

      // C·∫≠p nh·∫≠t conversation v·ªõi AI message
      final finalConversation = updatedConversation.copyWith(
        messageIds: List<String>.from(updatedConversation.messageIds)
          ..add(aiMessageId),
        messageCount: updatedConversation.messageCount + 1,
        updatedAt: DateTime.now(),
        lastMessagePreview: responseText.length > 100
            ? '${responseText.substring(0, 100)}...'
            : responseText,
      );

      await _conversationsBox?.put(conversationId, finalConversation);

      return aiMessage;
    } catch (e) {
      print('‚ùå Error in sendMessage: $e');

      // T·∫°o error message v·ªõi th√¥ng tin chi ti·∫øt h∆°n
      final errorMessageId =
          '${conversationId}_${DateTime.now().millisecondsSinceEpoch + 1}';

      String errorContent;
      if (e.toString().contains('Function call error:')) {
        errorContent =
            '‚ùå ${e.toString().replaceFirst('Exception: Function call error: ', '')}';
      } else {
        errorContent =
            '‚ùå Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.\n\nChi ti·∫øt l·ªói: $e';
      }

      final errorMessage = ChatMessage.assistant(
        id: errorMessageId,
        conversationId: conversationId,
        content: errorContent,
        status: ChatMessageStatus.failed,
        metadata: {'error': e.toString()},
      );

      await _messagesBox?.put(errorMessageId, errorMessage);

      // C·∫≠p nh·∫≠t conversation v·ªõi error message
      final finalConversation = updatedConversation.copyWith(
        messageIds: List<String>.from(updatedConversation.messageIds)
          ..add(errorMessageId),
        messageCount: updatedConversation.messageCount + 1,
        updatedAt: DateTime.now(),
        lastMessagePreview: errorContent.length > 100
            ? '${errorContent.substring(0, 100)}...'
            : errorContent,
      );

      await _conversationsBox?.put(conversationId, finalConversation);

      return errorMessage;
    }
  }

  // Stream message response
  Stream<String> sendMessageStream({
    required String conversationId,
    required String content,
    Map<String, dynamic> metadata = const {},
  }) async* {
    if (_model == null) {
      throw Exception('AI model ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }

    final conversation = getConversation(conversationId);
    if (conversation == null) {
      throw Exception('Kh√¥ng t√¨m th·∫•y conversation');
    }

    // T·∫°o user message
    final userMessageId =
        '${conversationId}_${DateTime.now().millisecondsSinceEpoch}';
    final userMessage = ChatMessage.user(
      id: userMessageId,
      conversationId: conversationId,
      content: content,
      metadata: metadata,
    );

    // L∆∞u user message
    await _messagesBox?.put(userMessageId, userMessage);

    // C·∫≠p nh·∫≠t conversation v·ªõi user message
    final updatedConversation = conversation.copyWith(
      messageIds: List<String>.from(conversation.messageIds)
        ..add(userMessageId),
      messageCount: conversation.messageCount + 1,
      updatedAt: DateTime.now(),
    );

    if (updatedConversation.title == 'Cu·ªôc tr√≤ chuy·ªán m·ªõi' &&
        content.isNotEmpty) {
      updatedConversation.title = content.length > 50
          ? '${content.substring(0, 50)}...'
          : content;
    }

    await _conversationsBox?.put(conversationId, updatedConversation);

    try {
      // L·∫•y l·ªãch s·ª≠ chat ƒë·ªÉ t·∫°o context
      final chatHistory = _buildChatHistory(conversationId);

      // T·∫°o chat session
      final chat = _model!.startChat(history: chatHistory);

      // G·ª≠i message ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra function calls
      var response = await chat.sendMessage(Content.text(content));

      // X·ª≠ l√Ω function calls n·∫øu c√≥
      final functionCalls = response.functionCalls.toList();
      if (functionCalls.isNotEmpty) {
        print('üîß Found ${functionCalls.length} function calls');

        // Th√¥ng b√°o ƒëang x·ª≠ l√Ω function calls
        yield 'üîç ƒêang t√¨m ki·∫øm th√¥ng tin...\n\n';

        // X·ª≠ l√Ω t·ª´ng function call
        for (final functionCall in functionCalls) {
          print('üîß Processing function call: ${functionCall.name}');
          final functionResult = await _handleFunctionCall(functionCall);

          // Ki·ªÉm tra n·∫øu function call b·ªã l·ªói
          if (functionResult['success'] == false) {
            final errorMessage =
                functionResult['error'] ??
                'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán function call';
            yield '‚ùå L·ªói: $errorMessage\n\n';

            // L∆∞u error message
            final settings = _aiSettingsService!.getCurrentSettings();
            final aiMessageId =
                '${conversationId}_${DateTime.now().millisecondsSinceEpoch + 1}';
            final errorContent =
                'üîç ƒêang t√¨m ki·∫øm th√¥ng tin...\n\n‚ùå L·ªói: $errorMessage';
            final aiMessage = ChatMessage.assistant(
              id: aiMessageId,
              conversationId: conversationId,
              content: errorContent,
              isMarkdown: settings.enableMarkdown,
              status: ChatMessageStatus.failed,
            );

            await _messagesBox?.put(aiMessageId, aiMessage);

            // C·∫≠p nh·∫≠t conversation
            final finalConversation = updatedConversation.copyWith(
              messageIds: List<String>.from(updatedConversation.messageIds)
                ..add(aiMessageId),
              messageCount: updatedConversation.messageCount + 1,
              updatedAt: DateTime.now(),
              lastMessagePreview: errorMessage,
            );

            await _conversationsBox?.put(conversationId, finalConversation);
            return;
          }

          // G·ª≠i k·∫øt qu·∫£ function call tr·ªü l·∫°i model
          response = await chat.sendMessage(
            Content.functionResponse(functionCall.name, functionResult),
          );

          print('üîß Response after function call: ${response.text}');
        }

        // Sau khi x·ª≠ l√Ω t·∫•t c·∫£ function calls, l·∫•y response cu·ªëi c√πng
        final finalResponseText = response.text ?? '';
        print('üîß Final response text: "$finalResponseText"');

        if (finalResponseText.isNotEmpty) {
          yield finalResponseText;
        } else {
          // N·∫øu kh√¥ng c√≥ response text, c√≥ th·ªÉ AI c·∫ßn th√™m function calls
          final additionalFunctionCalls = response.functionCalls.toList();
          if (additionalFunctionCalls.isNotEmpty) {
            print('üîß Found additional function calls, processing...');
            // X·ª≠ l√Ω th√™m function calls n·∫øu c√≥
            for (final functionCall in additionalFunctionCalls) {
              final functionResult = await _handleFunctionCall(functionCall);

              // Ki·ªÉm tra l·ªói trong additional function calls
              if (functionResult['success'] == false) {
                final errorMessage =
                    functionResult['error'] ??
                    'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán function call b·ªï sung';
                yield '‚ùå L·ªói: $errorMessage';
                return;
              }

              response = await chat.sendMessage(
                Content.functionResponse(functionCall.name, functionResult),
              );
            }
            final additionalResponseText = response.text ?? '';
            if (additionalResponseText.isNotEmpty) {
              yield additionalResponseText;
            } else {
              yield '‚ö†Ô∏è ƒê√£ t√¨m ki·∫øm th√¥ng tin th√†nh c√¥ng nh∆∞ng AI kh√¥ng t·∫°o ƒë∆∞·ª£c ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ h·ªèi l·∫°i v·ªõi c√¢u h·ªèi c·ª• th·ªÉ h∆°n.';
            }
          } else {
            yield '‚ö†Ô∏è ƒê√£ t√¨m ki·∫øm th√¥ng tin th√†nh c√¥ng nh∆∞ng AI kh√¥ng t·∫°o ƒë∆∞·ª£c ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ h·ªèi l·∫°i v·ªõi c√¢u h·ªèi c·ª• th·ªÉ h∆°n.';
          }
        }

        // L∆∞u complete AI message
        final settings = _aiSettingsService!.getCurrentSettings();
        final aiMessageId =
            '${conversationId}_${DateTime.now().millisecondsSinceEpoch + 1}';
        final actualResponseText =
            response.text ??
            'ƒê√£ t√¨m ki·∫øm th√¥ng tin th√†nh c√¥ng. Vui l√≤ng h·ªèi t√¥i v·ªÅ th√¥ng tin b·∫°n c·∫ßn bi·∫øt.';
        final fullContent =
            'üîç ƒêang t√¨m ki·∫øm th√¥ng tin...\n\n' + actualResponseText;
        final aiMessage = ChatMessage.assistant(
          id: aiMessageId,
          conversationId: conversationId,
          content: fullContent,
          isMarkdown: settings.enableMarkdown,
          status: ChatMessageStatus.sent,
        );

        await _messagesBox?.put(aiMessageId, aiMessage);

        // C·∫≠p nh·∫≠t conversation v·ªõi AI message
        final finalConversation = updatedConversation.copyWith(
          messageIds: List<String>.from(updatedConversation.messageIds)
            ..add(aiMessageId),
          messageCount: updatedConversation.messageCount + 1,
          updatedAt: DateTime.now(),
          lastMessagePreview: actualResponseText.length > 100
              ? '${actualResponseText.substring(0, 100)}...'
              : actualResponseText,
        );

        await _conversationsBox?.put(conversationId, finalConversation);
      } else {
        // Kh√¥ng c√≥ function calls, stream response b√¨nh th∆∞·ªùng
        final responseStream = chat.sendMessageStream(Content.text(content));

        String fullResponse = '';
        final aiMessageId =
            '${conversationId}_${DateTime.now().millisecondsSinceEpoch + 1}';

        await for (final chunk in responseStream) {
          final chunkText = chunk.text ?? '';
          fullResponse += chunkText;
          yield chunkText;
        }

        // L∆∞u complete AI message
        final settings = _aiSettingsService!.getCurrentSettings();
        final aiMessage = ChatMessage.assistant(
          id: aiMessageId,
          conversationId: conversationId,
          content: fullResponse,
          isMarkdown: settings.enableMarkdown,
          status: ChatMessageStatus.sent,
        );

        await _messagesBox?.put(aiMessageId, aiMessage);

        // C·∫≠p nh·∫≠t conversation v·ªõi AI message
        final finalConversation = updatedConversation.copyWith(
          messageIds: List<String>.from(updatedConversation.messageIds)
            ..add(aiMessageId),
          messageCount: updatedConversation.messageCount + 1,
          updatedAt: DateTime.now(),
          lastMessagePreview: fullResponse.length > 100
              ? '${fullResponse.substring(0, 100)}...'
              : fullResponse,
        );

        await _conversationsBox?.put(conversationId, finalConversation);
      }
    } catch (e) {
      print('‚ùå Error in sendMessageStream: $e');
      final errorMessage =
          '‚ùå Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.\n\nChi ti·∫øt l·ªói: $e';
      yield errorMessage;

      // L∆∞u error message
      try {
        final settings = _aiSettingsService!.getCurrentSettings();
        final aiMessageId =
            '${conversationId}_${DateTime.now().millisecondsSinceEpoch + 1}';
        final aiMessage = ChatMessage.assistant(
          id: aiMessageId,
          conversationId: conversationId,
          content: errorMessage,
          isMarkdown: settings.enableMarkdown,
          status: ChatMessageStatus.failed,
          metadata: {'error': e.toString()},
        );

        await _messagesBox?.put(aiMessageId, aiMessage);

        // C·∫≠p nh·∫≠t conversation
        final conversation = getConversation(conversationId);
        if (conversation != null) {
          final finalConversation = conversation.copyWith(
            messageIds: List<String>.from(conversation.messageIds)
              ..add(aiMessageId),
            messageCount: conversation.messageCount + 1,
            updatedAt: DateTime.now(),
            lastMessagePreview: 'L·ªói: ${e.toString()}',
          );

          await _conversationsBox?.put(conversationId, finalConversation);
        }
      } catch (saveError) {
        print('‚ùå Error saving error message: $saveError');
      }
    }
  }

  // X√¢y d·ª±ng chat history cho context
  List<Content> _buildChatHistory(String conversationId) {
    final messages = getConversationMessages(conversationId);
    final history = <Content>[];

    for (final message in messages) {
      if (message.role == ChatMessageRole.user) {
        history.add(Content.text(message.content));
      } else if (message.role == ChatMessageRole.assistant &&
          message.status == ChatMessageStatus.sent) {
        history.add(Content.model([TextPart(message.content)]));
      }
    }

    return history;
  }

  // X√≥a conversation
  Future<void> deleteConversation(String conversationId) async {
    final conversation = getConversation(conversationId);
    if (conversation != null) {
      // X√≥a t·∫•t c·∫£ messages
      for (final messageId in conversation.messageIds) {
        await _messagesBox?.delete(messageId);
      }

      // X√≥a conversation
      await _conversationsBox?.delete(conversationId);
    }
  }

  // X√≥a message
  Future<void> deleteMessage(String messageId) async {
    final message = _messagesBox?.get(messageId);
    if (message != null) {
      final conversation = getConversation(message.conversationId);
      if (conversation != null) {
        conversation.removeMessageId(messageId);
      }
      await _messagesBox?.delete(messageId);
    }
  }

  // C·∫≠p nh·∫≠t conversation
  Future<void> updateConversation(ChatConversation conversation) async {
    await _conversationsBox?.put(conversation.id, conversation);
  }

  // Clear all data
  Future<void> clearAllData() async {
    await _conversationsBox?.clear();
    await _messagesBox?.clear();
  }

  // Close service
  Future<void> close() async {
    await _conversationsBox?.close();
    await _messagesBox?.close();
    // Don't close _aiSettingsService as it might be shared with other services
  }
}
