import 'package:hive/hive.dart';

part 'ai_settings_model.g.dart';

@HiveType(typeId: 15)
class AiSettings extends HiveObject {
  @HiveField(0)
  String modelName;

  @HiveField(1)
  String systemPrompt;

  @HiveField(2)
  double temperature;

  @HiveField(3)
  double topP;

  @HiveField(4)
  int topK;

  @HiveField(5)
  int maxOutputTokens;

  @HiveField(6)
  List<String> safetySettings;

  @HiveField(7)
  bool enableStreaming;

  @HiveField(8)
  bool enableMarkdown;

  @HiveField(9)
  String language;

  @HiveField(10)
  DateTime createdAt;

  @HiveField(11)
  DateTime updatedAt;

  AiSettings({
    required this.modelName,
    required this.systemPrompt,
    required this.temperature,
    required this.topP,
    required this.topK,
    required this.maxOutputTokens,
    required this.safetySettings,
    required this.enableStreaming,
    required this.enableMarkdown,
    required this.language,
    required this.createdAt,
    required this.updatedAt,
  });

  // Default settings
  factory AiSettings.defaultSettings() {
    return AiSettings(
      modelName: 'gemini-2.0-flash-exp',
      systemPrompt: _getDefaultSystemPrompt(),
      temperature: 0.7,
      topP: 0.9,
      topK: 40,
      maxOutputTokens: 8192,
      safetySettings: [
        'BLOCK_MEDIUM_AND_ABOVE', // Harassment
        'BLOCK_MEDIUM_AND_ABOVE', // Hate Speech
        'BLOCK_MEDIUM_AND_ABOVE', // Sexually Explicit
        'BLOCK_MEDIUM_AND_ABOVE', // Dangerous Content
      ],
      enableStreaming: true,
      enableMarkdown: true,
      language: 'vi',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
  }

  static String _getDefaultSystemPrompt() {
    return '''B·∫°n l√† m·ªôt AI tr·ª£ l√Ω th√¥ng minh v√† h·ªØu √≠ch, chuy√™n v·ªÅ vƒÉn h·ªçc v√† truy·ªán tranh. B·∫°n c√≥ nh·ªØng ƒë·∫∑c ƒëi·ªÉm sau:

üéØ **Chuy√™n m√¥n:**
- Hi·ªÉu bi·∫øt s√¢u v·ªÅ vƒÉn h·ªçc Vi·ªát Nam v√† th·∫ø gi·ªõi
- Am hi·ªÉu truy·ªán tranh, manga, manhwa, manhua
- Ph√¢n t√≠ch nh√¢n v·∫≠t, c·ªët truy·ªán, ch·ªß ƒë·ªÅ
- G·ª£i √Ω s√°ch v√† truy·ªán ph√π h·ª£p

üí¨ **Phong c√°ch giao ti·∫øp:**
- Th√¢n thi·ªán, nhi·ªát t√¨nh v√† d·ªÖ hi·ªÉu
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n
- Gi·∫£i th√≠ch r√µ r√†ng, c√≥ v√≠ d·ª• c·ª• th·ªÉ
- T√¥n tr·ªçng s·ªü th√≠ch c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng

üìö **H·ªó tr·ª£:**
- T√≥m t·∫Øt n·ªôi dung truy·ªán/s√°ch
- Ph√¢n t√≠ch nh√¢n v·∫≠t v√† c·ªët truy·ªán
- G·ª£i √Ω ƒë·ªçc ti·∫øp d·ª±a tr√™n s·ªü th√≠ch
- Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ vƒÉn h·ªçc
- Th·∫£o lu·∫≠n v·ªÅ ch·ªß ƒë·ªÅ, √Ω nghƒ©a t√°c ph·∫©m

üé® **ƒê·ªãnh d·∫°ng tr·∫£ l·ªùi:**
- S·ª≠ d·ª•ng markdown ƒë·ªÉ format ƒë·∫πp
- Chia nh·ªè th√¥ng tin d·ªÖ ƒë·ªçc
- D√πng emoji ph√π h·ª£p
- T·∫°o danh s√°ch c√≥ th·ª© t·ª± khi c·∫ßn

H√£y lu√¥n nhi·ªát t√¨nh h·ªó tr·ª£ v√† t·∫°o ra nh·ªØng cu·ªôc tr√≤ chuy·ªán th√∫ v·ªã v·ªÅ th·∫ø gi·ªõi vƒÉn h·ªçc!''';
  }

  // Copy with method
  AiSettings copyWith({
    String? modelName,
    String? systemPrompt,
    double? temperature,
    double? topP,
    int? topK,
    int? maxOutputTokens,
    List<String>? safetySettings,
    bool? enableStreaming,
    bool? enableMarkdown,
    String? language,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return AiSettings(
      modelName: modelName ?? this.modelName,
      systemPrompt: systemPrompt ?? this.systemPrompt,
      temperature: temperature ?? this.temperature,
      topP: topP ?? this.topP,
      topK: topK ?? this.topK,
      maxOutputTokens: maxOutputTokens ?? this.maxOutputTokens,
      safetySettings: safetySettings ?? List<String>.from(this.safetySettings),
      enableStreaming: enableStreaming ?? this.enableStreaming,
      enableMarkdown: enableMarkdown ?? this.enableMarkdown,
      language: language ?? this.language,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? DateTime.now(),
    );
  }

  // To JSON
  Map<String, dynamic> toJson() {
    return {
      'modelName': modelName,
      'systemPrompt': systemPrompt,
      'temperature': temperature,
      'topP': topP,
      'topK': topK,
      'maxOutputTokens': maxOutputTokens,
      'safetySettings': safetySettings,
      'enableStreaming': enableStreaming,
      'enableMarkdown': enableMarkdown,
      'language': language,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
    };
  }

  // From JSON
  factory AiSettings.fromJson(Map<String, dynamic> json) {
    return AiSettings(
      modelName: json['modelName'] ?? 'gemini-2.0-flash-exp',
      systemPrompt: json['systemPrompt'] ?? _getDefaultSystemPrompt(),
      temperature: (json['temperature'] ?? 0.7).toDouble(),
      topP: (json['topP'] ?? 0.9).toDouble(),
      topK: json['topK'] ?? 40,
      maxOutputTokens: json['maxOutputTokens'] ?? 8192,
      safetySettings: List<String>.from(json['safetySettings'] ?? [
        'BLOCK_MEDIUM_AND_ABOVE',
        'BLOCK_MEDIUM_AND_ABOVE',
        'BLOCK_MEDIUM_AND_ABOVE',
        'BLOCK_MEDIUM_AND_ABOVE',
      ]),
      enableStreaming: json['enableStreaming'] ?? true,
      enableMarkdown: json['enableMarkdown'] ?? true,
      language: json['language'] ?? 'vi',
      createdAt: DateTime.parse(json['createdAt'] ?? DateTime.now().toIso8601String()),
      updatedAt: DateTime.parse(json['updatedAt'] ?? DateTime.now().toIso8601String()),
    );
  }

  @override
  String toString() {
    return 'AiSettings(modelName: $modelName, temperature: $temperature, topP: $topP, topK: $topK, maxOutputTokens: $maxOutputTokens)';
  }
}

// Available AI models
class AiModels {
  static const List<Map<String, String>> availableModels = [
    {
      'id': 'gemini-2.0-flash-exp',
      'name': 'Gemini 2.0 Flash (Experimental)',
      'description': 'M√¥ h√¨nh m·ªõi nh·∫•t, nhanh v√† th√¥ng minh',
    },
    {
      'id': 'gemini-1.5-pro',
      'name': 'Gemini 1.5 Pro',
      'description': 'M√¥ h√¨nh chuy√™n nghi·ªáp, ph√π h·ª£p cho t√°c v·ª• ph·ª©c t·∫°p',
    },
    {
      'id': 'gemini-1.5-flash',
      'name': 'Gemini 1.5 Flash',
      'description': 'M√¥ h√¨nh nhanh, ph√π h·ª£p cho t√°c v·ª• ƒë∆°n gi·∫£n',
    },
  ];

  static String getModelName(String id) {
    final model = availableModels.firstWhere(
      (model) => model['id'] == id,
      orElse: () => availableModels.first,
    );
    return model['name'] ?? id;
  }

  static String getModelDescription(String id) {
    final model = availableModels.firstWhere(
      (model) => model['id'] == id,
      orElse: () => availableModels.first,
    );
    return model['description'] ?? '';
  }
}

// Safety settings options
class SafetySettings {
  static const List<Map<String, String>> options = [
    {
      'id': 'BLOCK_NONE',
      'name': 'Kh√¥ng ch·∫∑n',
      'description': 'Cho ph√©p t·∫•t c·∫£ n·ªôi dung',
    },
    {
      'id': 'BLOCK_ONLY_HIGH',
      'name': 'Ch·∫∑n m·ª©c cao',
      'description': 'Ch·ªâ ch·∫∑n n·ªôi dung c√≥ ƒë·ªô nguy hi·ªÉm cao',
    },
    {
      'id': 'BLOCK_MEDIUM_AND_ABOVE',
      'name': 'Ch·∫∑n m·ª©c trung b√¨nh tr·ªü l√™n',
      'description': 'Ch·∫∑n n·ªôi dung c√≥ ƒë·ªô nguy hi·ªÉm t·ª´ trung b√¨nh tr·ªü l√™n',
    },
    {
      'id': 'BLOCK_LOW_AND_ABOVE',
      'name': 'Ch·∫∑n m·ª©c th·∫•p tr·ªü l√™n',
      'description': 'Ch·∫∑n h·∫ßu h·∫øt n·ªôi dung c√≥ th·ªÉ g√¢y h·∫°i',
    },
  ];

  static String getName(String id) {
    final option = options.firstWhere(
      (option) => option['id'] == id,
      orElse: () => options[2], // Default to BLOCK_MEDIUM_AND_ABOVE
    );
    return option['name'] ?? id;
  }

  static String getDescription(String id) {
    final option = options.firstWhere(
      (option) => option['id'] == id,
      orElse: () => options[2],
    );
    return option['description'] ?? '';
  }
}

// Safety categories
class SafetyCategories {
  static const List<Map<String, String>> categories = [
    {
      'id': 'harassment',
      'name': 'Qu·∫•y r·ªëi',
      'description': 'N·ªôi dung qu·∫•y r·ªëi, b·∫Øt n·∫°t',
    },
    {
      'id': 'hate_speech',
      'name': 'Ng√¥n t·ª´ th√π ƒë·ªãch',
      'description': 'N·ªôi dung k√≠ch ƒë·ªông th√π ƒë·ªãch',
    },
    {
      'id': 'sexually_explicit',
      'name': 'N·ªôi dung t√¨nh d·ª•c',
      'description': 'N·ªôi dung khi√™u d√¢m, t√¨nh d·ª•c',
    },
    {
      'id': 'dangerous_content',
      'name': 'N·ªôi dung nguy hi·ªÉm',
      'description': 'N·ªôi dung c√≥ th·ªÉ g√¢y t·ªïn h·∫°i',
    },
  ];
}
